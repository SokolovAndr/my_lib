// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'models.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Author.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Author TABLE
class TableAuthor extends SqfEntityTableBase {
  TableAuthor() {
    // declare properties of EntityTable
    tableName = 'authors';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('isInactive', DbType.bool, defaultValue: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAuthor();
  }
}

// Book TABLE
class TableBook extends SqfEntityTableBase {
  TableBook() {
    // declare properties of EntityTable
    tableName = 'books';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('isInactive', DbType.bool, defaultValue: false),
      SqfEntityFieldRelationshipBase(
          TableAuthor.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'authorsId',
          defaultValue: 0),
      SqfEntityFieldRelationshipBase(TableGenre.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'genresId',
          defaultValue: 0),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBook();
  }
}

// Genre TABLE
class TableGenre extends SqfEntityTableBase {
  TableGenre() {
    // declare properties of EntityTable
    tableName = 'genres';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableGenre();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyAppDatabaseModel extends SqfEntityModelProvider {
  MyAppDatabaseModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableAuthor.getInstance,
      TableBook.getInstance,
      TableGenre.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Author
class Author extends TableBase {
  Author({this.id, this.name, this.isInactive}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Author.withFields(this.name, this.isInactive) {
    _setDefaultValues();
  }
  Author.withId(this.id, this.name, this.isInactive) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Author.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['isInactive'] != null) {
      isInactive = o['isInactive'].toString() == '1' ||
          o['isInactive'].toString() == 'true';
    }
  }
  // FIELDS (Author)
  int? id;
  String? name;
  bool? isInactive;

  // end FIELDS (Author)

// COLLECTIONS & VIRTUALS (Author)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBooks', 'plField2'..]) or so on..
  List<Book>? plBooks;

  /// get Book(s) filtered by id=authorsId
  BookFilterBuilder? getBooks(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Book()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .authorsId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Author)

  static const bool _softDeleteActivated = false;
  AuthorManager? __mnAuthor;

  AuthorManager get _mnAuthor {
    return __mnAuthor = __mnAuthor ?? AuthorManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (isInactive != null) {
      map['isInactive'] = forQuery ? (isInactive! ? 1 : 0) : isInactive;
    } else if (isInactive != null || !forView) {
      map['isInactive'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (isInactive != null) {
      map['isInactive'] = forQuery ? (isInactive! ? 1 : 0) : isInactive;
    } else if (isInactive != null || !forView) {
      map['isInactive'] = null;
    }

// COLLECTIONS (Author)
    if (!forQuery) {
      map['Books'] = await getBooks()!.toMapList();
    }
// END COLLECTIONS (Author)

    return map;
  }

  /// This method returns Json String [Author]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Author]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, isInactive];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, isInactive];
  }

  static Future<List<Author>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Author.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Author>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Author>[];
    try {
      objList = list
          .map((author) => Author.fromMap(author as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Author.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Author>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Author> objList = <Author>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Author.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('authors.plBooks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBooks'))) {
          /*_loadedfields!.add('authors.plBooks'); */ obj.plBooks =
              obj.plBooks ??
                  await obj.getBooks()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Author by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Author] if exist, otherwise returns null
  Future<Author?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Author? obj;
    final data = await _mnAuthor.getById([id]);
    if (data.length != 0) {
      obj = Author.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('authors.plBooks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBooks'))) {
          /*_loadedfields!.add('authors.plBooks'); */ obj.plBooks =
              obj.plBooks ??
                  await obj.getBooks()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Author) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAuthor.insert(this, ignoreBatch);
    } else {
      await _mnAuthor.update(this);
    }

    return id;
  }

  /// Saves the (Author) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAuthor.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnAuthor.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Author. Returns a new Primary Key value of Author

  /// <returns>Returns a new Primary Key value of Author
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Author> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Author> authors,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyAppDatabaseModel().batchStart();
    for (final obj in authors) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyAppDatabaseModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < authors.length; i++) {
        if (authors[i].id == null) {
          authors[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAuthor.rawInsert(
          'INSERT OR REPLACE INTO authors (id, name, isInactive)  VALUES (?,?,?)',
          [id, name, isInactive],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Author id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Author id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Author Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Author>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Author> authors,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnAuthor.rawInsertAll(
        'INSERT OR REPLACE INTO authors (id, name, isInactive)  VALUES (?,?,?)',
        authors,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Author

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Author invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Book().select().authorsId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnAuthor
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAuthor.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Author] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  AuthorFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AuthorFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  AuthorFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AuthorFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isInactive = isInactive ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion author

// region AuthorField
class AuthorField extends FilterBase {
  AuthorField(AuthorFilterBuilder authorFB) : super(authorFB);

  @override
  AuthorFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder isNull() {
    return super.isNull() as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as AuthorFilterBuilder;
  }

  @override
  AuthorField get not {
    return super.not as AuthorField;
  }
}
// endregion AuthorField

// region AuthorFilterBuilder
class AuthorFilterBuilder extends ConjunctionBase {
  AuthorFilterBuilder(Author obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnAuthor = obj._mnAuthor;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  AuthorManager? _mnAuthor;

  /// put the sql keyword 'AND'
  @override
  AuthorFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  AuthorFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  AuthorFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  AuthorFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  AuthorFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  AuthorFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  AuthorFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AuthorFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AuthorFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AuthorFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AuthorFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  AuthorField _setField(AuthorField? field, String colName, DbType dbtype) {
    return AuthorField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  AuthorField? _id;
  AuthorField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  AuthorField? _name;
  AuthorField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  AuthorField? _isInactive;
  AuthorField get isInactive {
    return _isInactive = _setField(_isInactive, 'isInactive', DbType.bool);
  }

  /// Deletes List<Author> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Book) according to DeleteRule.CASCADE
    final idListBookBYauthorsId = toListPrimaryKeySQL(false);
    final resBookBYauthorsId = await Book()
        .select()
        .where('authorsId IN (${idListBookBYauthorsId['sql']})',
            parameterValue: idListBookBYauthorsId['args'])
        .delete(hardDelete);
    if (!resBookBYauthorsId.success) {
      return resBookBYauthorsId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnAuthor!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnAuthor!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from authors ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnAuthor!.updateBatch(qparams, values);
  }

  /// This method always returns [Author] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Author?
  @override
  Future<Author?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnAuthor!.toList(qparams);
    final data = await objFuture;
    Author? obj;
    if (data.isNotEmpty) {
      obj = Author.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('authors.plBooks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBooks'))) {
          /*_loadedfields!.add('authors.plBooks'); */ obj.plBooks =
              obj.plBooks ??
                  await obj.getBooks()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Author]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Author?
  @override
  Future<Author> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Author();
  }

  /// This method returns int. [Author]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? authorCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final authorsFuture = await _mnAuthor!.toList(qparams);
    final int count = authorsFuture[0]['CNT'] as int;
    if (authorCount != null) {
      authorCount(count);
    }
    return count;
  }

  /// This method returns List<Author> [Author]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Author>
  @override
  Future<List<Author>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Author> authorsData = await Author.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return authorsData;
  }

  /// This method returns Json String [Author]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Author]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Author]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnAuthor!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Author]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM authors WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnAuthor!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Author]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnAuthor!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Author.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnAuthor!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AuthorFilterBuilder

// region AuthorFields
class AuthorFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fIsInactive;
  static TableField get isInactive {
    return _fIsInactive = _fIsInactive ??
        SqlSyntax.setField(_fIsInactive, 'isInactive', DbType.bool);
  }
}
// endregion AuthorFields

//region AuthorManager
class AuthorManager extends SqfEntityProvider {
  AuthorManager()
      : super(MyAppDatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'authors';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion AuthorManager
// region Book
class Book extends TableBase {
  Book({this.id, this.title, this.isInactive, this.authorsId, this.genresId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Book.withFields(this.title, this.isInactive, this.authorsId, this.genresId) {
    _setDefaultValues();
  }
  Book.withId(
      this.id, this.title, this.isInactive, this.authorsId, this.genresId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Book.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['isInactive'] != null) {
      isInactive = o['isInactive'].toString() == '1' ||
          o['isInactive'].toString() == 'true';
    }
    authorsId = int.tryParse(o['authorsId'].toString());

    genresId = int.tryParse(o['genresId'].toString());

    // RELATIONSHIPS FromMAP
    plAuthor = o['author'] != null
        ? Author.fromMap(o['author'] as Map<String, dynamic>)
        : null;
    plGenre = o['genre'] != null
        ? Genre.fromMap(o['genre'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Book)
  int? id;
  String? title;
  bool? isInactive;
  int? authorsId;
  int? genresId;

  // end FIELDS (Book)

// RELATIONSHIPS (Book)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plAuthor', 'plField2'..]) or so on..
  Author? plAuthor;

  /// get Author By AuthorsId
  Future<Author?> getAuthor(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Author().getById(authorsId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plGenre', 'plField2'..]) or so on..
  Genre? plGenre;

  /// get Genre By GenresId
  Future<Genre?> getGenre(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Genre().getById(genresId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Book)

  static const bool _softDeleteActivated = false;
  BookManager? __mnBook;

  BookManager get _mnBook {
    return __mnBook = __mnBook ?? BookManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (isInactive != null) {
      map['isInactive'] = forQuery ? (isInactive! ? 1 : 0) : isInactive;
    } else if (isInactive != null || !forView) {
      map['isInactive'] = null;
    }
    if (authorsId != null) {
      map['authorsId'] = forView
          ? plAuthor == null
              ? authorsId
              : plAuthor!.name
          : authorsId;
    } else if (authorsId != null || !forView) {
      map['authorsId'] = null;
    }
    if (genresId != null) {
      map['genresId'] = forView
          ? plGenre == null
              ? genresId
              : plGenre!.name
          : genresId;
    } else if (genresId != null || !forView) {
      map['genresId'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (isInactive != null) {
      map['isInactive'] = forQuery ? (isInactive! ? 1 : 0) : isInactive;
    } else if (isInactive != null || !forView) {
      map['isInactive'] = null;
    }
    if (authorsId != null) {
      map['authorsId'] = forView
          ? plAuthor == null
              ? authorsId
              : plAuthor!.name
          : authorsId;
    } else if (authorsId != null || !forView) {
      map['authorsId'] = null;
    }
    if (genresId != null) {
      map['genresId'] = forView
          ? plGenre == null
              ? genresId
              : plGenre!.name
          : genresId;
    } else if (genresId != null || !forView) {
      map['genresId'] = null;
    }

    return map;
  }

  /// This method returns Json String [Book]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Book]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [title, isInactive, authorsId, genresId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, title, isInactive, authorsId, genresId];
  }

  static Future<List<Book>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Book.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Book>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Book>[];
    try {
      objList = list
          .map((book) => Book.fromMap(book as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Book.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Book>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Book> objList = <Book>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Book.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plAuthor'))) {
          obj.plAuthor =
              obj.plAuthor ?? await obj.getAuthor(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plGenre'))) {
          obj.plGenre =
              obj.plGenre ?? await obj.getGenre(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Book by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Book] if exist, otherwise returns null
  Future<Book?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Book? obj;
    final data = await _mnBook.getById([id]);
    if (data.length != 0) {
      obj = Book.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plAuthor'))) {
          obj.plAuthor =
              obj.plAuthor ?? await obj.getAuthor(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plGenre'))) {
          obj.plGenre =
              obj.plGenre ?? await obj.getGenre(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Book) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnBook.insert(this, ignoreBatch);
    } else {
      await _mnBook.update(this);
    }

    return id;
  }

  /// Saves the (Book) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnBook.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBook.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Book. Returns a new Primary Key value of Book

  /// <returns>Returns a new Primary Key value of Book
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Book> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Book> books,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyAppDatabaseModel().batchStart();
    for (final obj in books) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyAppDatabaseModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < books.length; i++) {
        if (books[i].id == null) {
          books[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnBook.rawInsert(
          'INSERT OR REPLACE INTO books (id, title, isInactive, authorsId, genresId)  VALUES (?,?,?,?,?)',
          [id, title, isInactive, authorsId, genresId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Book id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Book id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Book Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Book>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Book> books,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnBook.rawInsertAll(
        'INSERT OR REPLACE INTO books (id, title, isInactive, authorsId, genresId)  VALUES (?,?,?,?,?)',
        books,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Book

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Book invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnBook
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBook.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Book] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  BookFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return BookFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  BookFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return BookFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isInactive = isInactive ?? false;
    authorsId = authorsId ?? 0;
    genresId = genresId ?? 0;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion book

// region BookField
class BookField extends FilterBase {
  BookField(BookFilterBuilder bookFB) : super(bookFB);

  @override
  BookFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder isNull() {
    return super.isNull() as BookFilterBuilder;
  }

  @override
  BookFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as BookFilterBuilder;
  }

  @override
  BookFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as BookFilterBuilder;
  }

  @override
  BookField get not {
    return super.not as BookField;
  }
}
// endregion BookField

// region BookFilterBuilder
class BookFilterBuilder extends ConjunctionBase {
  BookFilterBuilder(Book obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnBook = obj._mnBook;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  BookManager? _mnBook;

  /// put the sql keyword 'AND'
  @override
  BookFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  BookFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  BookFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  BookFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  BookFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  BookFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  BookFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  BookFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  BookFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  BookFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  BookFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  BookField _setField(BookField? field, String colName, DbType dbtype) {
    return BookField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  BookField? _id;
  BookField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  BookField? _title;
  BookField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  BookField? _isInactive;
  BookField get isInactive {
    return _isInactive = _setField(_isInactive, 'isInactive', DbType.bool);
  }

  BookField? _authorsId;
  BookField get authorsId {
    return _authorsId = _setField(_authorsId, 'authorsId', DbType.integer);
  }

  BookField? _genresId;
  BookField get genresId {
    return _genresId = _setField(_genresId, 'genresId', DbType.integer);
  }

  /// Deletes List<Book> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnBook!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnBook!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from books ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnBook!.updateBatch(qparams, values);
  }

  /// This method always returns [Book] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Book?
  @override
  Future<Book?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnBook!.toList(qparams);
    final data = await objFuture;
    Book? obj;
    if (data.isNotEmpty) {
      obj = Book.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plAuthor'))) {
          obj.plAuthor =
              obj.plAuthor ?? await obj.getAuthor(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plGenre'))) {
          obj.plGenre =
              obj.plGenre ?? await obj.getGenre(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Book]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Book?
  @override
  Future<Book> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Book();
  }

  /// This method returns int. [Book]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? bookCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final booksFuture = await _mnBook!.toList(qparams);
    final int count = booksFuture[0]['CNT'] as int;
    if (bookCount != null) {
      bookCount(count);
    }
    return count;
  }

  /// This method returns List<Book> [Book]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Book>
  @override
  Future<List<Book>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Book> booksData = await Book.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return booksData;
  }

  /// This method returns Json String [Book]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Book]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Book]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnBook!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Book]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM books WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnBook!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Book]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnBook!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Book.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnBook!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion BookFilterBuilder

// region BookFields
class BookFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fIsInactive;
  static TableField get isInactive {
    return _fIsInactive = _fIsInactive ??
        SqlSyntax.setField(_fIsInactive, 'isInactive', DbType.bool);
  }

  static TableField? _fAuthorsId;
  static TableField get authorsId {
    return _fAuthorsId = _fAuthorsId ??
        SqlSyntax.setField(_fAuthorsId, 'authorsId', DbType.integer);
  }

  static TableField? _fGenresId;
  static TableField get genresId {
    return _fGenresId = _fGenresId ??
        SqlSyntax.setField(_fGenresId, 'genresId', DbType.integer);
  }
}
// endregion BookFields

//region BookManager
class BookManager extends SqfEntityProvider {
  BookManager()
      : super(MyAppDatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'books';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion BookManager
// region Genre
class Genre extends TableBase {
  Genre({this.id, this.name}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Genre.withFields(this.name) {
    _setDefaultValues();
  }
  Genre.withId(this.id, this.name) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Genre.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
  }
  // FIELDS (Genre)
  int? id;
  String? name;

  // end FIELDS (Genre)

// COLLECTIONS & VIRTUALS (Genre)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBooks', 'plField2'..]) or so on..
  List<Book>? plBooks;

  /// get Book(s) filtered by id=genresId
  BookFilterBuilder? getBooks(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Book()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .genresId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Genre)

  static const bool _softDeleteActivated = false;
  GenreManager? __mnGenre;

  GenreManager get _mnGenre {
    return __mnGenre = __mnGenre ?? GenreManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }

// COLLECTIONS (Genre)
    if (!forQuery) {
      map['Books'] = await getBooks()!.toMapList();
    }
// END COLLECTIONS (Genre)

    return map;
  }

  /// This method returns Json String [Genre]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Genre]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name];
  }

  static Future<List<Genre>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Genre.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Genre>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Genre>[];
    try {
      objList = list
          .map((genre) => Genre.fromMap(genre as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Genre.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Genre>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Genre> objList = <Genre>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Genre.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('genres.plBooks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBooks'))) {
          /*_loadedfields!.add('genres.plBooks'); */ obj.plBooks =
              obj.plBooks ??
                  await obj.getBooks()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Genre by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Genre] if exist, otherwise returns null
  Future<Genre?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Genre? obj;
    final data = await _mnGenre.getById([id]);
    if (data.length != 0) {
      obj = Genre.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('genres.plBooks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBooks'))) {
          /*_loadedfields!.add('genres.plBooks'); */ obj.plBooks =
              obj.plBooks ??
                  await obj.getBooks()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Genre) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnGenre.insert(this, ignoreBatch);
    } else {
      await _mnGenre.update(this);
    }

    return id;
  }

  /// Saves the (Genre) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnGenre.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnGenre.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Genre. Returns a new Primary Key value of Genre

  /// <returns>Returns a new Primary Key value of Genre
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Genre> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Genre> genres,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyAppDatabaseModel().batchStart();
    for (final obj in genres) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyAppDatabaseModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < genres.length; i++) {
        if (genres[i].id == null) {
          genres[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnGenre.rawInsert(
          'INSERT OR REPLACE INTO genres (id, name)  VALUES (?,?)',
          [id, name],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Genre id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Genre id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Genre Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Genre>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Genre> genres,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnGenre.rawInsertAll(
        'INSERT OR REPLACE INTO genres (id, name)  VALUES (?,?)', genres,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Genre

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Genre invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Book().select().genresId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnGenre
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnGenre.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Genre] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  GenreFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return GenreFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  GenreFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return GenreFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion genre

// region GenreField
class GenreField extends FilterBase {
  GenreField(GenreFilterBuilder genreFB) : super(genreFB);

  @override
  GenreFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder isNull() {
    return super.isNull() as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as GenreFilterBuilder;
  }

  @override
  GenreFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as GenreFilterBuilder;
  }

  @override
  GenreField get not {
    return super.not as GenreField;
  }
}
// endregion GenreField

// region GenreFilterBuilder
class GenreFilterBuilder extends ConjunctionBase {
  GenreFilterBuilder(Genre obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnGenre = obj._mnGenre;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  GenreManager? _mnGenre;

  /// put the sql keyword 'AND'
  @override
  GenreFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  GenreFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  GenreFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  GenreFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  GenreFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  GenreFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  GenreFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  GenreFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  GenreFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  GenreFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  GenreFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  GenreField _setField(GenreField? field, String colName, DbType dbtype) {
    return GenreField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  GenreField? _id;
  GenreField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  GenreField? _name;
  GenreField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  /// Deletes List<Genre> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Book) according to DeleteRule.CASCADE
    final idListBookBYgenresId = toListPrimaryKeySQL(false);
    final resBookBYgenresId = await Book()
        .select()
        .where('genresId IN (${idListBookBYgenresId['sql']})',
            parameterValue: idListBookBYgenresId['args'])
        .delete(hardDelete);
    if (!resBookBYgenresId.success) {
      return resBookBYgenresId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnGenre!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnGenre!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from genres ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnGenre!.updateBatch(qparams, values);
  }

  /// This method always returns [Genre] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Genre?
  @override
  Future<Genre?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnGenre!.toList(qparams);
    final data = await objFuture;
    Genre? obj;
    if (data.isNotEmpty) {
      obj = Genre.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('genres.plBooks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBooks'))) {
          /*_loadedfields!.add('genres.plBooks'); */ obj.plBooks =
              obj.plBooks ??
                  await obj.getBooks()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Genre]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Genre?
  @override
  Future<Genre> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Genre();
  }

  /// This method returns int. [Genre]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? genreCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final genresFuture = await _mnGenre!.toList(qparams);
    final int count = genresFuture[0]['CNT'] as int;
    if (genreCount != null) {
      genreCount(count);
    }
    return count;
  }

  /// This method returns List<Genre> [Genre]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Genre>
  @override
  Future<List<Genre>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Genre> genresData = await Genre.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return genresData;
  }

  /// This method returns Json String [Genre]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Genre]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Genre]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnGenre!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Genre]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM genres WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnGenre!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Genre]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnGenre!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Genre.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnGenre!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion GenreFilterBuilder

// region GenreFields
class GenreFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }
}
// endregion GenreFields

//region GenreManager
class GenreManager extends SqfEntityProvider {
  GenreManager()
      : super(MyAppDatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'genres';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion GenreManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await MyAppDatabaseModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await MyAppDatabaseModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await MyAppDatabaseModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyAppDatabaseModelSequenceManager extends SqfEntityProvider {
  MyAppDatabaseModelSequenceManager() : super(MyAppDatabaseModel());
}
// END OF ENTITIES
